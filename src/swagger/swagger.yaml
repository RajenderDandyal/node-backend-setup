swagger: "2.0"
info:
  description: "Node-backend-setup"
  version: "1.0.0"
  title: "Node-backend-setup"
  termsOfService: "http://swagger.io/terms/"
  contact:
    email: "rajender.0184@gmail.com"
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:8081
basePath: /api/v1
schemes:
- http
- https
securityDefinitions:
  Bearer:
    type: apiKey
    name: Authorization
    in: header
paths:
  /user:
    post:
      tags:
      - "User Module"
      summary: "Create user"
      description: "API to create user"
      parameters:
      - in: "body"
        name: "createUserRequest"
        description: "Create user"
        required: true
        schema:
          $ref: "#/definitions/createUserRequest"
      produces:
      - "application/json"
      responses:
        '200':
          description: "User created successfully"
          schema:
            $ref: '#/definitions/createUserResponse'
        '400':
          description: "Bad Request - Required fields not present"
        '500':
          description: "Internal Server Error"
  "/user/list":
    get:
      security:
      - Bearer: []
      tags:
      - "User Module"
      summary: "Fetch user list"
      description: "Fetch user list"
      produces:
      - "application/json"
      parameters:
      - name: "skip"
        in: "query"
        description: "No.of record to be skipped for pagination"
        type: "number"
        required: false
      - name: "limit"
        in: "query"
        description: "no. of record api should return for pagination"
        type: "number"
        required: false
      responses:
        '200':
          description: "User Fetched Successfully"
          schema:
            $ref: '#/definitions/FetchCustomerListResponse'
        '400':
          description: "Bad Request - Required fields not present"
        '500':
          description: "Internal Server Error"
  "/user/detail/{userId}":
    get:
      security:
      - Bearer: []
      tags:
      - "User Module"
      summary: "Fetch user detail"
      description: "Fetch user detail"
      parameters:
      - name: "userId"
        in: "path"
        description: "User Id whose detail is to be fetched"
        type: "string"
      produces:
      - "application/json"
      responses:
        '200':
          description: "User Fetched Successfully"
          schema:
            $ref: '#/definitions/FetchUserDetailResponse'
        '400':
          description: "Bad Request - Required fields not present"
        '500':
          description: "Internal Server Error"
  "/user/authenticate":
    post:
      security:
      - Bearer: []
      tags:
      - "User Module"
      summary: "Authenticate user"
      description: "Authenticate user"
      parameters:
      - in: "body"
        name: "authenticateUserRequest"
        description: "authenticateUserRequest"
        required: true
        schema:
          $ref: "#/definitions/authenticateUserRequest"
      produces:
      - "application/json"
      responses:
        '200':
          description: "User authenticated successfully"
          schema:
            $ref: '#/definitions/createUserResponse'
        '400':
          description: "Bad Request - Required fields not present"
        '500':
          description: "Internal Server Error"
  "/user/remove/{userId}":
    delete:
      security:
      - Bearer: []
      tags:
      - "User Module"
      summary: "Remove user"
      description: "Remove user"
      parameters:
      - name: "userId"
        in: "path"
        description: "id of user who needs to be removed"
        type: "string"
      produces:
      - "application/json"
      responses:
        '204':
          description: "User Deleted Successfully"
        '400':
          description: "Bad Request - Required fields not present"
        '500':
          description: "Internal Server Error"
definitions:
  createUserRequest:
    required:
    - "name"
    - "password"
    properties:
      name:
        type: "string"
        description: "name of user"
      password:
        type: "string"
        description: "password of the user"
      phone:
        type: "string"
        description: "Phone no. of user"
  createUserResponse:
    type: "object"
    properties:
      status:
        type: "integer"
      message:
        type: "string"
      body:
        type: "object"
        properties:
          results:
            type: "array"
            items:
              type: "object"
  FetchCustomerListResponse:
    type: "object"
    properties:
      status:
        type: "integer"
      message:
        type: "string"
      body:
        type: "object"
  FetchUserDetailResponse:
    type: "object"
    properties:
      status:
        type: "integer"
      message:
        type: "string"
      body:
        type: "object"
  changeUserPasswordRequest:
    required:
    - "userId"
    - "currentPassword"
    - "newPassword"
    properties:
      userId:
        type: "string"
        description: "userLoginId of user"
      currentPassword:
        type: "string"
        description: "password of the user"
      newPassword:
        type: "string"
        description: "user type such as customer or admin"
  authenticateUserRequest:
    required:
    - "name"
    - "password"
    properties:
      name:
        type: "string"
        description: "name of user"
      password:
        type: "string"
        description: "password of the user"